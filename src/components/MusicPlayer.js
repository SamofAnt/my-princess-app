import React, { useState, useEffect, useRef } from 'react';
import styled from 'styled-components';

const AudioButton = styled.button`
  position: absolute;
  top: 10px;
  right: 50px;
  background: transparent;
  border: none;
  font-size: 26px;
  color: white;
  cursor: pointer;
  transition: transform 0.3s ease;

  &:hover {
    transform: scale(1.2);
    color: gold;
  }
`;

const tracks = [
  `${process.env.PUBLIC_URL}/music/Stan.mp3`,
  `${process.env.PUBLIC_URL}/music/houseOfBalloons.mp3`,
];

const MusicPlayer = () => {
  const [playing, setPlaying] = useState(false);
  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å –ø–µ—Ä–≤—ã–º —Ç—Ä–µ–∫–æ–º
  const audioRef = useRef(new Audio(tracks[0]));

  useEffect(() => {
    const audio = audioRef.current;
    // –û—Ç–º–µ–Ω—è–µ–º –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
    audio.loop = false;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–∫–∞
    const handleEnded = () => {
      setCurrentTrackIndex(prevIndex => {
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–∏–π, –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞, –∏–Ω–∞—á–µ ‚Äì —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
        const nextIndex = prevIndex + 1;
        return nextIndex < tracks.length ? nextIndex : 0;
      });
    };

    audio.addEventListener("ended", handleEnded);
    return () => {
      audio.removeEventListener("ended", handleEnded);
      audio.pause();
    };
  }, []);

  // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞ –∏–ª–∏ —Ñ–ª–∞–≥–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫
  useEffect(() => {
    const audio = audioRef.current;
    audio.src = tracks[currentTrackIndex];
    if (playing) {
      audio.play().catch(err => console.log("Error playing audio:", err));
    }
  }, [currentTrackIndex, playing]);

  const toggleMusic = () => {
    setPlaying(prev => !prev);
  };

  return (
    <AudioButton onClick={toggleMusic}>
      {playing ? 'üîá' : 'üéµ'}
    </AudioButton>
  );
};

export default MusicPlayer;
